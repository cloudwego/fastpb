syntax = "proto3";
package echo;
option go_package = "github.com/cloudwego/fastpb/examples/fastpb_gen";

import "base.proto";
import "nested.proto";

//--------------------request & response--------------

enum MsgEnum {
  ENUM0 = 0;
  ENUM1 = 1;
  ENUM2 = 2;
}

message Message {
  int32 field3 = 3;   // int32 = varint; int32
  int64 field4 = 4;   // int64 = varint; int64
  uint32 field5 = 5;  // uint32 = varint; uint32
  uint64 field6 = 6;  // uint64 = varint; uint64
  sint32 field7 = 7;  // sint32 = zigzag32; int32
  sint64 field8 = 8;  // sint64 = zigzag64; int64
  bool field13 = 13;  // bool = varint; bool

  float field2 = 2;       // float = fixed32; float32
  double field1 = 1;      // double = fixed64; float64
  fixed32 field9 = 9;     // fixed32 = fixed32; uint32
  fixed64 field10 = 10;   // fixed64 = fixed64; uint64
  sfixed32 field11 = 11;  // sfixed32 = fixed32; int32
  sfixed64 field12 = 12;  // sfixed64 = fixed64; int64

  string field14 = 14;    // string = bytes; string
  bytes field15 = 15; // []byte = bytes; []byte
  Message field16 = 16;   // *struct = bytes; *struct

  repeated string field20 = 20;   // []list = bytes; []list
  repeated Message field21 = 21;  // []list = bytes; []list
  map<int32, string> field22 = 22;    // map[] = bytes; map[]
  map<string, Message> field23 = 23;  // map[] = bytes; map[]
  map<string, base.Base> field24 = 24;  // map[] = bytes; map[]

  base.Enum field27 = 27; // int32
  repeated base.Enum field28 = 28;   // []list = bytes; []list
  map<int32, base.Enum> field29 = 29;  // map[] = bytes; map[]

  nested.echo.MsgEnum field30 = 30; // int32
  repeated nested.echo.MsgEnum field31 = 31;   // []list = bytes; []list
  map<int32, nested.echo.MsgEnum> field32 = 32;  // map[] = bytes; map[]

  enum Enum {
    ENUM0 = 0;
    ENUM1 = 1;
    ENUM2 = 2;
  }
  Enum field33 = 33; // int32
  repeated Enum field34 = 34;   // []list = bytes; []list
  map<int32, Enum> field35 = 35;  // map[] = bytes; map[]

  MsgEnum field36 = 36; // int32
  repeated MsgEnum field37 = 37;   // []list = bytes; []list
  map<int32, MsgEnum> field38 = 38;  // map[] = bytes; map[]

  oneof field40 {
    int64 field41 = 41;
    bool field42 = 42;
    Message field43 = 43;
    base.Enum field44 = 44; // int32
    base.Base field45 = 45;
  }


  message Condition {
    oneof field1 {
      int64 field2 = 2;
      ConditionTree field3 = 3;
    }
    bool field4 = 4;
  }

  message ConditionTree {
    map<int32, base.Enum> field1 = 1;
    repeated Condition field2 = 2;
  }
  Condition field50 = 50;

  optional int32 field51 = 51;   // int32 = varint; int32
  optional int64 field52 = 52;   // int64 = varint; int64
  optional uint32 field53 = 53;  // uint32 = varint; uint32
  optional uint64 field54 = 54;  // uint64 = varint; uint64
  optional sint32 field55 = 55;  // sint32 = zigzag32; int32
  optional sint64 field56 = 56;  // sint64 = zigzag64; int64
  optional bool field57 = 57;  // bool = varint; bool
  optional string field58 = 58;   // []list = bytes; []list
  optional Message field59 = 59;  // []list = bytes; []list
}

message Request {
  Message message = 1;
  Request req = 2;
  base.Base Base = 255;
}

message Response {
  string Action = 1;
  string Msg = 2;
  base.BaseResp BaseResp = 255;
}

//----------------------service-------------------
service Echo {
  rpc echo (base.Base) returns (Response) {
  }
}
