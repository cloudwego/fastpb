// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package mount

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	player "github.com/cloudwego/fastpb/examples/fastpb_gen/user/player"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Mount) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Mount[number], err)
}

func (x *Mount) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Mount) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Owner, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Mount) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Kind = player.PlayerKind(v)
	return offset, nil
}

func (x *Mount) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Mount) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *Mount) fastWriteField3(buf []byte) (offset int) {
	if x.Owner == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOwner())
	return offset
}

func (x *Mount) fastWriteField4(buf []byte) (offset int) {
	if x.Kind == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetKind()))
	return offset
}

func (x *Mount) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Mount) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *Mount) sizeField3() (n int) {
	if x.Owner == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetOwner())
	return n
}

func (x *Mount) sizeField4() (n int) {
	if x.Kind == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetKind()))
	return n
}

var fieldIDToName_Mount = map[int32]string{
	1: "Name",
	3: "Owner",
	4: "Kind",
}

var _ = player.File_user_player_player_proto
