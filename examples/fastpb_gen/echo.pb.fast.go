// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package fastpb_gen

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	nested "github.com/cloudwego/fastpb/examples/fastpb_gen/nested"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Message) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 22:
		offset, err = x.fastReadField22(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 23:
		offset, err = x.fastReadField23(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 24:
		offset, err = x.fastReadField24(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 27:
		offset, err = x.fastReadField27(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 28:
		offset, err = x.fastReadField28(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 29:
		offset, err = x.fastReadField29(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 30:
		offset, err = x.fastReadField30(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 31:
		offset, err = x.fastReadField31(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 32:
		offset, err = x.fastReadField32(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 33:
		offset, err = x.fastReadField33(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 34:
		offset, err = x.fastReadField34(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 35:
		offset, err = x.fastReadField35(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 36:
		offset, err = x.fastReadField36(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 37:
		offset, err = x.fastReadField37(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 38:
		offset, err = x.fastReadField38(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 41:
		offset, err = x.fastReadField41(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 42:
		offset, err = x.fastReadField42(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 43:
		offset, err = x.fastReadField43(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 44:
		offset, err = x.fastReadField44(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 45:
		offset, err = x.fastReadField45(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 50:
		offset, err = x.fastReadField50(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 51:
		offset, err = x.fastReadField51(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 52:
		offset, err = x.fastReadField52(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 53:
		offset, err = x.fastReadField53(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 54:
		offset, err = x.fastReadField54(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 55:
		offset, err = x.fastReadField55(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 56:
		offset, err = x.fastReadField56(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 57:
		offset, err = x.fastReadField57(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 58:
		offset, err = x.fastReadField58(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 59:
		offset, err = x.fastReadField59(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Message[number], err)
}

func (x *Message) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Field1, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Message) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Field2, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *Message) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Field3, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Field4, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Field5, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Field6, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Field7, offset, err = fastpb.ReadSint32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Field8, offset, err = fastpb.ReadSint64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Field9, offset, err = fastpb.ReadFixed32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Field10, offset, err = fastpb.ReadFixed64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Field11, offset, err = fastpb.ReadSfixed32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Field12, offset, err = fastpb.ReadSfixed64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Field13, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Message) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Field14, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.Field15, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *Message) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Field16 = &v
	return offset, nil
}

func (x *Message) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Field20 = append(x.Field20, v)
	return offset, err
}

func (x *Message) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Field21 = append(x.Field21, &v)
	return offset, nil
}

func (x *Message) fastReadField22(buf []byte, _type int8) (offset int, err error) {
	if x.Field22 == nil {
		x.Field22 = make(map[int32]string)
	}
	var key int32
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Field22[key] = value
	return offset, nil
}

func (x *Message) fastReadField23(buf []byte, _type int8) (offset int, err error) {
	if x.Field23 == nil {
		x.Field23 = make(map[string]*Message)
	}
	var key string
	var value *Message
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v Message
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.Field23[key] = value
	return offset, nil
}

func (x *Message) fastReadField24(buf []byte, _type int8) (offset int, err error) {
	if x.Field24 == nil {
		x.Field24 = make(map[string]*Base)
	}
	var key string
	var value *Base
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v Base
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.Field24[key] = value
	return offset, nil
}

func (x *Message) fastReadField27(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Field27 = Enum(v)
	return offset, nil
}

func (x *Message) fastReadField28(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Field28 = append(x.Field28, Enum(v))
			return offset, nil
		})
	return offset, err
}

func (x *Message) fastReadField29(buf []byte, _type int8) (offset int, err error) {
	if x.Field29 == nil {
		x.Field29 = make(map[int32]Enum)
	}
	var key int32
	var value Enum
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			value = Enum(v)
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.Field29[key] = value
	return offset, nil
}

func (x *Message) fastReadField30(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Field30 = nested.MsgEnum(v)
	return offset, nil
}

func (x *Message) fastReadField31(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Field31 = append(x.Field31, nested.MsgEnum(v))
			return offset, nil
		})
	return offset, err
}

func (x *Message) fastReadField32(buf []byte, _type int8) (offset int, err error) {
	if x.Field32 == nil {
		x.Field32 = make(map[int32]nested.MsgEnum)
	}
	var key int32
	var value nested.MsgEnum
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			value = nested.MsgEnum(v)
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.Field32[key] = value
	return offset, nil
}

func (x *Message) fastReadField33(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Field33 = Message_Enum(v)
	return offset, nil
}

func (x *Message) fastReadField34(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Field34 = append(x.Field34, Message_Enum(v))
			return offset, nil
		})
	return offset, err
}

func (x *Message) fastReadField35(buf []byte, _type int8) (offset int, err error) {
	if x.Field35 == nil {
		x.Field35 = make(map[int32]Message_Enum)
	}
	var key int32
	var value Message_Enum
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			value = Message_Enum(v)
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.Field35[key] = value
	return offset, nil
}

func (x *Message) fastReadField36(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Field36 = MsgEnum(v)
	return offset, nil
}

func (x *Message) fastReadField37(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Field37 = append(x.Field37, MsgEnum(v))
			return offset, nil
		})
	return offset, err
}

func (x *Message) fastReadField38(buf []byte, _type int8) (offset int, err error) {
	if x.Field38 == nil {
		x.Field38 = make(map[int32]MsgEnum)
	}
	var key int32
	var value MsgEnum
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			value = MsgEnum(v)
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.Field38[key] = value
	return offset, nil
}

func (x *Message) fastReadField41(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Field41
	x.Field40 = &ov
	ov.Field41, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField42(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Field42
	x.Field40 = &ov
	ov.Field42, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Message) fastReadField43(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Field43
	x.Field40 = &ov
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Field43 = &v
	return offset, nil
}

func (x *Message) fastReadField44(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Field44
	x.Field40 = &ov
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	ov.Field44 = Enum(v)
	return offset, nil
}

func (x *Message) fastReadField45(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Field45
	x.Field40 = &ov
	var v Base
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Field45 = &v
	return offset, nil
}

func (x *Message) fastReadField50(buf []byte, _type int8) (offset int, err error) {
	var v Message_Condition
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Field50 = &v
	return offset, nil
}

func (x *Message) fastReadField51(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt32(buf, _type)
	x.Field51 = &tmp
	return offset, err
}

func (x *Message) fastReadField52(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Field52 = &tmp
	return offset, err
}

func (x *Message) fastReadField53(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadUint32(buf, _type)
	x.Field53 = &tmp
	return offset, err
}

func (x *Message) fastReadField54(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadUint64(buf, _type)
	x.Field54 = &tmp
	return offset, err
}

func (x *Message) fastReadField55(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadSint32(buf, _type)
	x.Field55 = &tmp
	return offset, err
}

func (x *Message) fastReadField56(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadSint64(buf, _type)
	x.Field56 = &tmp
	return offset, err
}

func (x *Message) fastReadField57(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Field57 = &tmp
	return offset, err
}

func (x *Message) fastReadField58(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Field58 = &tmp
	return offset, err
}

func (x *Message) fastReadField59(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Field59 = &v
	return offset, nil
}

func (x *Request) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Request[number], err)
}

func (x *Request) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Message = &v
	return offset, nil
}

func (x *Request) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Request
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Req = &v
	return offset, nil
}

func (x *Request) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v Base
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *Response) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 255:
		offset, err = x.fastReadField255(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Response[number], err)
}

func (x *Response) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Action, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Response) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Response) fastReadField255(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *Message_Condition) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Message_Condition[number], err)
}

func (x *Message_Condition) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Condition_Field2
	x.Field1 = &ov
	ov.Field2, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message_Condition) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var ov Message_Condition_Field3
	x.Field1 = &ov
	var v Message_ConditionTree
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Field3 = &v
	return offset, nil
}

func (x *Message_Condition) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Field4, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Message_ConditionTree) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Message_ConditionTree[number], err)
}

func (x *Message_ConditionTree) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	if x.Field1 == nil {
		x.Field1 = make(map[int32]Enum)
	}
	var key int32
	var value Enum
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			value = Enum(v)
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.Field1[key] = value
	return offset, nil
}

func (x *Message_ConditionTree) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Message_Condition
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Field2 = append(x.Field2, &v)
	return offset, nil
}

func (x *Message) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	offset += x.fastWriteField22(buf[offset:])
	offset += x.fastWriteField23(buf[offset:])
	offset += x.fastWriteField24(buf[offset:])
	offset += x.fastWriteField27(buf[offset:])
	offset += x.fastWriteField28(buf[offset:])
	offset += x.fastWriteField29(buf[offset:])
	offset += x.fastWriteField30(buf[offset:])
	offset += x.fastWriteField31(buf[offset:])
	offset += x.fastWriteField32(buf[offset:])
	offset += x.fastWriteField33(buf[offset:])
	offset += x.fastWriteField34(buf[offset:])
	offset += x.fastWriteField35(buf[offset:])
	offset += x.fastWriteField36(buf[offset:])
	offset += x.fastWriteField37(buf[offset:])
	offset += x.fastWriteField38(buf[offset:])
	offset += x.fastWriteField41(buf[offset:])
	offset += x.fastWriteField42(buf[offset:])
	offset += x.fastWriteField43(buf[offset:])
	offset += x.fastWriteField44(buf[offset:])
	offset += x.fastWriteField45(buf[offset:])
	offset += x.fastWriteField50(buf[offset:])
	offset += x.fastWriteField51(buf[offset:])
	offset += x.fastWriteField52(buf[offset:])
	offset += x.fastWriteField53(buf[offset:])
	offset += x.fastWriteField54(buf[offset:])
	offset += x.fastWriteField55(buf[offset:])
	offset += x.fastWriteField56(buf[offset:])
	offset += x.fastWriteField57(buf[offset:])
	offset += x.fastWriteField58(buf[offset:])
	offset += x.fastWriteField59(buf[offset:])
	return offset
}

func (x *Message) fastWriteField1(buf []byte) (offset int) {
	if x.Field1 == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 1, x.Field1)
	return offset
}

func (x *Message) fastWriteField2(buf []byte) (offset int) {
	if x.Field2 == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 2, x.Field2)
	return offset
}

func (x *Message) fastWriteField3(buf []byte) (offset int) {
	if x.Field3 == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.Field3)
	return offset
}

func (x *Message) fastWriteField4(buf []byte) (offset int) {
	if x.Field4 == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.Field4)
	return offset
}

func (x *Message) fastWriteField5(buf []byte) (offset int) {
	if x.Field5 == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 5, x.Field5)
	return offset
}

func (x *Message) fastWriteField6(buf []byte) (offset int) {
	if x.Field6 == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 6, x.Field6)
	return offset
}

func (x *Message) fastWriteField7(buf []byte) (offset int) {
	if x.Field7 == 0 {
		return offset
	}
	offset += fastpb.WriteSint32(buf[offset:], 7, x.Field7)
	return offset
}

func (x *Message) fastWriteField8(buf []byte) (offset int) {
	if x.Field8 == 0 {
		return offset
	}
	offset += fastpb.WriteSint64(buf[offset:], 8, x.Field8)
	return offset
}

func (x *Message) fastWriteField9(buf []byte) (offset int) {
	if x.Field9 == 0 {
		return offset
	}
	offset += fastpb.WriteFixed32(buf[offset:], 9, x.Field9)
	return offset
}

func (x *Message) fastWriteField10(buf []byte) (offset int) {
	if x.Field10 == 0 {
		return offset
	}
	offset += fastpb.WriteFixed64(buf[offset:], 10, x.Field10)
	return offset
}

func (x *Message) fastWriteField11(buf []byte) (offset int) {
	if x.Field11 == 0 {
		return offset
	}
	offset += fastpb.WriteSfixed32(buf[offset:], 11, x.Field11)
	return offset
}

func (x *Message) fastWriteField12(buf []byte) (offset int) {
	if x.Field12 == 0 {
		return offset
	}
	offset += fastpb.WriteSfixed64(buf[offset:], 12, x.Field12)
	return offset
}

func (x *Message) fastWriteField13(buf []byte) (offset int) {
	if !x.Field13 {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 13, x.Field13)
	return offset
}

func (x *Message) fastWriteField14(buf []byte) (offset int) {
	if x.Field14 == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.Field14)
	return offset
}

func (x *Message) fastWriteField15(buf []byte) (offset int) {
	if len(x.Field15) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 15, x.Field15)
	return offset
}

func (x *Message) fastWriteField16(buf []byte) (offset int) {
	if x.Field16 == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 16, x.Field16)
	return offset
}

func (x *Message) fastWriteField20(buf []byte) (offset int) {
	if len(x.Field20) == 0 {
		return offset
	}
	for i := range x.Field20 {
		offset += fastpb.WriteString(buf[offset:], 20, x.Field20[i])
	}
	return offset
}

func (x *Message) fastWriteField21(buf []byte) (offset int) {
	if x.Field21 == nil {
		return offset
	}
	for i := range x.Field21 {
		offset += fastpb.WriteMessage(buf[offset:], 21, x.Field21[i])
	}
	return offset
}

func (x *Message) fastWriteField22(buf []byte) (offset int) {
	if x.Field22 == nil {
		return offset
	}
	for k, v := range x.Field22 {
		offset += fastpb.WriteMapEntry(buf[offset:], 22,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Message) fastWriteField23(buf []byte) (offset int) {
	if x.Field23 == nil {
		return offset
	}
	for k, v := range x.Field23 {
		offset += fastpb.WriteMapEntry(buf[offset:], 23,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Message) fastWriteField24(buf []byte) (offset int) {
	if x.Field24 == nil {
		return offset
	}
	for k, v := range x.Field24 {
		offset += fastpb.WriteMapEntry(buf[offset:], 24,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Message) fastWriteField27(buf []byte) (offset int) {
	if x.Field27 == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 27, int32(x.Field27))
	return offset
}

func (x *Message) fastWriteField28(buf []byte) (offset int) {
	if len(x.Field28) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 28, len(x.Field28),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, int32(x.Field28[numIdxOrVal]))
			return offset
		})
	return offset
}

func (x *Message) fastWriteField29(buf []byte) (offset int) {
	if x.Field29 == nil {
		return offset
	}
	for k, v := range x.Field29 {
		offset += fastpb.WriteMapEntry(buf[offset:], 29,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, int32(v))
				return offset
			})
	}
	return offset
}

func (x *Message) fastWriteField30(buf []byte) (offset int) {
	if x.Field30 == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 30, int32(x.Field30))
	return offset
}

func (x *Message) fastWriteField31(buf []byte) (offset int) {
	if len(x.Field31) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 31, len(x.Field31),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, int32(x.Field31[numIdxOrVal]))
			return offset
		})
	return offset
}

func (x *Message) fastWriteField32(buf []byte) (offset int) {
	if x.Field32 == nil {
		return offset
	}
	for k, v := range x.Field32 {
		offset += fastpb.WriteMapEntry(buf[offset:], 32,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, int32(v))
				return offset
			})
	}
	return offset
}

func (x *Message) fastWriteField33(buf []byte) (offset int) {
	if x.Field33 == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 33, int32(x.Field33))
	return offset
}

func (x *Message) fastWriteField34(buf []byte) (offset int) {
	if len(x.Field34) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 34, len(x.Field34),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, int32(x.Field34[numIdxOrVal]))
			return offset
		})
	return offset
}

func (x *Message) fastWriteField35(buf []byte) (offset int) {
	if x.Field35 == nil {
		return offset
	}
	for k, v := range x.Field35 {
		offset += fastpb.WriteMapEntry(buf[offset:], 35,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, int32(v))
				return offset
			})
	}
	return offset
}

func (x *Message) fastWriteField36(buf []byte) (offset int) {
	if x.Field36 == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 36, int32(x.Field36))
	return offset
}

func (x *Message) fastWriteField37(buf []byte) (offset int) {
	if len(x.Field37) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 37, len(x.Field37),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, int32(x.Field37[numIdxOrVal]))
			return offset
		})
	return offset
}

func (x *Message) fastWriteField38(buf []byte) (offset int) {
	if x.Field38 == nil {
		return offset
	}
	for k, v := range x.Field38 {
		offset += fastpb.WriteMapEntry(buf[offset:], 38,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, int32(v))
				return offset
			})
	}
	return offset
}

func (x *Message) fastWriteField41(buf []byte) (offset int) {
	if x.GetField41() == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 41, x.GetField41())
	return offset
}

func (x *Message) fastWriteField42(buf []byte) (offset int) {
	if !x.GetField42() {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 42, x.GetField42())
	return offset
}

func (x *Message) fastWriteField43(buf []byte) (offset int) {
	if x.GetField43() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 43, x.GetField43())
	return offset
}

func (x *Message) fastWriteField44(buf []byte) (offset int) {
	if x.GetField44() == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 44, int32(x.GetField44()))
	return offset
}

func (x *Message) fastWriteField45(buf []byte) (offset int) {
	if x.GetField45() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 45, x.GetField45())
	return offset
}

func (x *Message) fastWriteField50(buf []byte) (offset int) {
	if x.Field50 == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 50, x.Field50)
	return offset
}

func (x *Message) fastWriteField51(buf []byte) (offset int) {
	if x.Field51 == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 51, *x.Field51)
	return offset
}

func (x *Message) fastWriteField52(buf []byte) (offset int) {
	if x.Field52 == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 52, *x.Field52)
	return offset
}

func (x *Message) fastWriteField53(buf []byte) (offset int) {
	if x.Field53 == nil {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 53, *x.Field53)
	return offset
}

func (x *Message) fastWriteField54(buf []byte) (offset int) {
	if x.Field54 == nil {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 54, *x.Field54)
	return offset
}

func (x *Message) fastWriteField55(buf []byte) (offset int) {
	if x.Field55 == nil {
		return offset
	}
	offset += fastpb.WriteSint32(buf[offset:], 55, *x.Field55)
	return offset
}

func (x *Message) fastWriteField56(buf []byte) (offset int) {
	if x.Field56 == nil {
		return offset
	}
	offset += fastpb.WriteSint64(buf[offset:], 56, *x.Field56)
	return offset
}

func (x *Message) fastWriteField57(buf []byte) (offset int) {
	if x.Field57 == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 57, *x.Field57)
	return offset
}

func (x *Message) fastWriteField58(buf []byte) (offset int) {
	if x.Field58 == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 58, *x.Field58)
	return offset
}

func (x *Message) fastWriteField59(buf []byte) (offset int) {
	if x.Field59 == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 59, x.Field59)
	return offset
}

func (x *Request) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *Request) fastWriteField1(buf []byte) (offset int) {
	if x.Message == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Message)
	return offset
}

func (x *Request) fastWriteField2(buf []byte) (offset int) {
	if x.Req == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.Req)
	return offset
}

func (x *Request) fastWriteField255(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.Base)
	return offset
}

func (x *Response) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField255(buf[offset:])
	return offset
}

func (x *Response) fastWriteField1(buf []byte) (offset int) {
	if x.Action == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.Action)
	return offset
}

func (x *Response) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.Msg)
	return offset
}

func (x *Response) fastWriteField255(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 255, x.BaseResp)
	return offset
}

func (x *Message_Condition) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Message_Condition) fastWriteField2(buf []byte) (offset int) {
	if x.GetField2() == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetField2())
	return offset
}

func (x *Message_Condition) fastWriteField3(buf []byte) (offset int) {
	if x.GetField3() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetField3())
	return offset
}

func (x *Message_Condition) fastWriteField4(buf []byte) (offset int) {
	if !x.Field4 {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 4, x.Field4)
	return offset
}

func (x *Message_ConditionTree) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Message_ConditionTree) fastWriteField1(buf []byte) (offset int) {
	if x.Field1 == nil {
		return offset
	}
	for k, v := range x.Field1 {
		offset += fastpb.WriteMapEntry(buf[offset:], 1,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, int32(v))
				return offset
			})
	}
	return offset
}

func (x *Message_ConditionTree) fastWriteField2(buf []byte) (offset int) {
	if x.Field2 == nil {
		return offset
	}
	for i := range x.Field2 {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.Field2[i])
	}
	return offset
}

func (x *Message) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField20()
	n += x.sizeField21()
	n += x.sizeField22()
	n += x.sizeField23()
	n += x.sizeField24()
	n += x.sizeField27()
	n += x.sizeField28()
	n += x.sizeField29()
	n += x.sizeField30()
	n += x.sizeField31()
	n += x.sizeField32()
	n += x.sizeField33()
	n += x.sizeField34()
	n += x.sizeField35()
	n += x.sizeField36()
	n += x.sizeField37()
	n += x.sizeField38()
	n += x.sizeField41()
	n += x.sizeField42()
	n += x.sizeField43()
	n += x.sizeField44()
	n += x.sizeField45()
	n += x.sizeField50()
	n += x.sizeField51()
	n += x.sizeField52()
	n += x.sizeField53()
	n += x.sizeField54()
	n += x.sizeField55()
	n += x.sizeField56()
	n += x.sizeField57()
	n += x.sizeField58()
	n += x.sizeField59()
	return n
}

func (x *Message) sizeField1() (n int) {
	if x.Field1 == 0 {
		return n
	}
	n += fastpb.SizeDouble(1, x.Field1)
	return n
}

func (x *Message) sizeField2() (n int) {
	if x.Field2 == 0 {
		return n
	}
	n += fastpb.SizeFloat(2, x.Field2)
	return n
}

func (x *Message) sizeField3() (n int) {
	if x.Field3 == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.Field3)
	return n
}

func (x *Message) sizeField4() (n int) {
	if x.Field4 == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.Field4)
	return n
}

func (x *Message) sizeField5() (n int) {
	if x.Field5 == 0 {
		return n
	}
	n += fastpb.SizeUint32(5, x.Field5)
	return n
}

func (x *Message) sizeField6() (n int) {
	if x.Field6 == 0 {
		return n
	}
	n += fastpb.SizeUint64(6, x.Field6)
	return n
}

func (x *Message) sizeField7() (n int) {
	if x.Field7 == 0 {
		return n
	}
	n += fastpb.SizeSint32(7, x.Field7)
	return n
}

func (x *Message) sizeField8() (n int) {
	if x.Field8 == 0 {
		return n
	}
	n += fastpb.SizeSint64(8, x.Field8)
	return n
}

func (x *Message) sizeField9() (n int) {
	if x.Field9 == 0 {
		return n
	}
	n += fastpb.SizeFixed32(9, x.Field9)
	return n
}

func (x *Message) sizeField10() (n int) {
	if x.Field10 == 0 {
		return n
	}
	n += fastpb.SizeFixed64(10, x.Field10)
	return n
}

func (x *Message) sizeField11() (n int) {
	if x.Field11 == 0 {
		return n
	}
	n += fastpb.SizeSfixed32(11, x.Field11)
	return n
}

func (x *Message) sizeField12() (n int) {
	if x.Field12 == 0 {
		return n
	}
	n += fastpb.SizeSfixed64(12, x.Field12)
	return n
}

func (x *Message) sizeField13() (n int) {
	if !x.Field13 {
		return n
	}
	n += fastpb.SizeBool(13, x.Field13)
	return n
}

func (x *Message) sizeField14() (n int) {
	if x.Field14 == "" {
		return n
	}
	n += fastpb.SizeString(14, x.Field14)
	return n
}

func (x *Message) sizeField15() (n int) {
	if len(x.Field15) == 0 {
		return n
	}
	n += fastpb.SizeBytes(15, x.Field15)
	return n
}

func (x *Message) sizeField16() (n int) {
	if x.Field16 == nil {
		return n
	}
	n += fastpb.SizeMessage(16, x.Field16)
	return n
}

func (x *Message) sizeField20() (n int) {
	if len(x.Field20) == 0 {
		return n
	}
	for i := range x.Field20 {
		n += fastpb.SizeString(20, x.Field20[i])
	}
	return n
}

func (x *Message) sizeField21() (n int) {
	if x.Field21 == nil {
		return n
	}
	for i := range x.Field21 {
		n += fastpb.SizeMessage(21, x.Field21[i])
	}
	return n
}

func (x *Message) sizeField22() (n int) {
	if x.Field22 == nil {
		return n
	}
	for k, v := range x.Field22 {
		n += fastpb.SizeMapEntry(22,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Message) sizeField23() (n int) {
	if x.Field23 == nil {
		return n
	}
	for k, v := range x.Field23 {
		n += fastpb.SizeMapEntry(23,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Message) sizeField24() (n int) {
	if x.Field24 == nil {
		return n
	}
	for k, v := range x.Field24 {
		n += fastpb.SizeMapEntry(24,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Message) sizeField27() (n int) {
	if x.Field27 == 0 {
		return n
	}
	n += fastpb.SizeInt32(27, int32(x.Field27))
	return n
}

func (x *Message) sizeField28() (n int) {
	if len(x.Field28) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(28, len(x.Field28),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, int32(x.Field28[numIdxOrVal]))
			return n
		})
	return n
}

func (x *Message) sizeField29() (n int) {
	if x.Field29 == nil {
		return n
	}
	for k, v := range x.Field29 {
		n += fastpb.SizeMapEntry(29,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, int32(v))
				return n
			})
	}
	return n
}

func (x *Message) sizeField30() (n int) {
	if x.Field30 == 0 {
		return n
	}
	n += fastpb.SizeInt32(30, int32(x.Field30))
	return n
}

func (x *Message) sizeField31() (n int) {
	if len(x.Field31) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(31, len(x.Field31),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, int32(x.Field31[numIdxOrVal]))
			return n
		})
	return n
}

func (x *Message) sizeField32() (n int) {
	if x.Field32 == nil {
		return n
	}
	for k, v := range x.Field32 {
		n += fastpb.SizeMapEntry(32,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, int32(v))
				return n
			})
	}
	return n
}

func (x *Message) sizeField33() (n int) {
	if x.Field33 == 0 {
		return n
	}
	n += fastpb.SizeInt32(33, int32(x.Field33))
	return n
}

func (x *Message) sizeField34() (n int) {
	if len(x.Field34) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(34, len(x.Field34),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, int32(x.Field34[numIdxOrVal]))
			return n
		})
	return n
}

func (x *Message) sizeField35() (n int) {
	if x.Field35 == nil {
		return n
	}
	for k, v := range x.Field35 {
		n += fastpb.SizeMapEntry(35,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, int32(v))
				return n
			})
	}
	return n
}

func (x *Message) sizeField36() (n int) {
	if x.Field36 == 0 {
		return n
	}
	n += fastpb.SizeInt32(36, int32(x.Field36))
	return n
}

func (x *Message) sizeField37() (n int) {
	if len(x.Field37) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(37, len(x.Field37),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, int32(x.Field37[numIdxOrVal]))
			return n
		})
	return n
}

func (x *Message) sizeField38() (n int) {
	if x.Field38 == nil {
		return n
	}
	for k, v := range x.Field38 {
		n += fastpb.SizeMapEntry(38,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, int32(v))
				return n
			})
	}
	return n
}

func (x *Message) sizeField41() (n int) {
	if x.GetField41() == 0 {
		return n
	}
	n += fastpb.SizeInt64(41, x.GetField41())
	return n
}

func (x *Message) sizeField42() (n int) {
	if !x.GetField42() {
		return n
	}
	n += fastpb.SizeBool(42, x.GetField42())
	return n
}

func (x *Message) sizeField43() (n int) {
	if x.GetField43() == nil {
		return n
	}
	n += fastpb.SizeMessage(43, x.GetField43())
	return n
}

func (x *Message) sizeField44() (n int) {
	if x.GetField44() == 0 {
		return n
	}
	n += fastpb.SizeInt32(44, int32(x.GetField44()))
	return n
}

func (x *Message) sizeField45() (n int) {
	if x.GetField45() == nil {
		return n
	}
	n += fastpb.SizeMessage(45, x.GetField45())
	return n
}

func (x *Message) sizeField50() (n int) {
	if x.Field50 == nil {
		return n
	}
	n += fastpb.SizeMessage(50, x.Field50)
	return n
}

func (x *Message) sizeField51() (n int) {
	if x.Field51 == nil {
		return n
	}
	n += fastpb.SizeInt32(51, *x.Field51)
	return n
}

func (x *Message) sizeField52() (n int) {
	if x.Field52 == nil {
		return n
	}
	n += fastpb.SizeInt64(52, *x.Field52)
	return n
}

func (x *Message) sizeField53() (n int) {
	if x.Field53 == nil {
		return n
	}
	n += fastpb.SizeUint32(53, *x.Field53)
	return n
}

func (x *Message) sizeField54() (n int) {
	if x.Field54 == nil {
		return n
	}
	n += fastpb.SizeUint64(54, *x.Field54)
	return n
}

func (x *Message) sizeField55() (n int) {
	if x.Field55 == nil {
		return n
	}
	n += fastpb.SizeSint32(55, *x.Field55)
	return n
}

func (x *Message) sizeField56() (n int) {
	if x.Field56 == nil {
		return n
	}
	n += fastpb.SizeSint64(56, *x.Field56)
	return n
}

func (x *Message) sizeField57() (n int) {
	if x.Field57 == nil {
		return n
	}
	n += fastpb.SizeBool(57, *x.Field57)
	return n
}

func (x *Message) sizeField58() (n int) {
	if x.Field58 == nil {
		return n
	}
	n += fastpb.SizeString(58, *x.Field58)
	return n
}

func (x *Message) sizeField59() (n int) {
	if x.Field59 == nil {
		return n
	}
	n += fastpb.SizeMessage(59, x.Field59)
	return n
}

func (x *Request) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField255()
	return n
}

func (x *Request) sizeField1() (n int) {
	if x.Message == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Message)
	return n
}

func (x *Request) sizeField2() (n int) {
	if x.Req == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.Req)
	return n
}

func (x *Request) sizeField255() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.Base)
	return n
}

func (x *Response) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField255()
	return n
}

func (x *Response) sizeField1() (n int) {
	if x.Action == "" {
		return n
	}
	n += fastpb.SizeString(1, x.Action)
	return n
}

func (x *Response) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.Msg)
	return n
}

func (x *Response) sizeField255() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(255, x.BaseResp)
	return n
}

func (x *Message_Condition) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Message_Condition) sizeField2() (n int) {
	if x.GetField2() == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetField2())
	return n
}

func (x *Message_Condition) sizeField3() (n int) {
	if x.GetField3() == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetField3())
	return n
}

func (x *Message_Condition) sizeField4() (n int) {
	if !x.Field4 {
		return n
	}
	n += fastpb.SizeBool(4, x.Field4)
	return n
}

func (x *Message_ConditionTree) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Message_ConditionTree) sizeField1() (n int) {
	if x.Field1 == nil {
		return n
	}
	for k, v := range x.Field1 {
		n += fastpb.SizeMapEntry(1,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, int32(v))
				return n
			})
	}
	return n
}

func (x *Message_ConditionTree) sizeField2() (n int) {
	if x.Field2 == nil {
		return n
	}
	for i := range x.Field2 {
		n += fastpb.SizeMessage(2, x.Field2[i])
	}
	return n
}

var fieldIDToName_Message = map[int32]string{
	1:  "Field1",
	2:  "Field2",
	3:  "Field3",
	4:  "Field4",
	5:  "Field5",
	6:  "Field6",
	7:  "Field7",
	8:  "Field8",
	9:  "Field9",
	10: "Field10",
	11: "Field11",
	12: "Field12",
	13: "Field13",
	14: "Field14",
	15: "Field15",
	16: "Field16",
	20: "Field20",
	21: "Field21",
	22: "Field22",
	23: "Field23",
	24: "Field24",
	27: "Field27",
	28: "Field28",
	29: "Field29",
	30: "Field30",
	31: "Field31",
	32: "Field32",
	33: "Field33",
	34: "Field34",
	35: "Field35",
	36: "Field36",
	37: "Field37",
	38: "Field38",
	41: "Field41",
	42: "Field42",
	43: "Field43",
	44: "Field44",
	45: "Field45",
	50: "Field50",
	51: "Field51",
	52: "Field52",
	53: "Field53",
	54: "Field54",
	55: "Field55",
	56: "Field56",
	57: "Field57",
	58: "Field58",
	59: "Field59",
}

var fieldIDToName_Request = map[int32]string{
	1:   "Message",
	2:   "Req",
	255: "Base",
}

var fieldIDToName_Response = map[int32]string{
	1:   "Action",
	2:   "Msg",
	255: "BaseResp",
}

var fieldIDToName_Message_Condition = map[int32]string{
	2: "Field2",
	3: "Field3",
	4: "Field4",
}

var fieldIDToName_Message_ConditionTree = map[int32]string{
	1: "Field1",
	2: "Field2",
}

var _ = nested.File_nested_proto
